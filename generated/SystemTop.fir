;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, address : UInt<16>, flip dataRead : UInt<32>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    reg stateReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Accelerator.scala 21:25]
    reg addressReg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 24:27]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 25:24]
    io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 28:18]
    io.address <= UInt<16>("h00") @[Accelerator.scala 29:14]
    io.address <= addressReg @[Accelerator.scala 30:14]
    io.dataWrite <= dataReg @[Accelerator.scala 31:16]
    io.done <= UInt<1>("h00") @[Accelerator.scala 32:11]
    reg x : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 34:18]
    reg y : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 35:18]
    node _T = eq(UInt<4>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 41:21]
        x <= UInt<1>("h00") @[Accelerator.scala 42:11]
        y <= UInt<1>("h00") @[Accelerator.scala 43:11]
        stateReg <= UInt<4>("h01") @[Accelerator.scala 44:18]
        skip @[Accelerator.scala 41:21]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        y <= UInt<1>("h00") @[Accelerator.scala 48:8]
        node _T_2 = lt(x, UInt<16>("h014")) @[Accelerator.scala 49:13]
        when _T_2 : @[Accelerator.scala 49:25]
          stateReg <= UInt<4>("h02") @[Accelerator.scala 50:18]
          skip @[Accelerator.scala 49:25]
        else : @[Accelerator.scala 51:19]
          io.done <= UInt<1>("h01") @[Accelerator.scala 52:17]
          skip @[Accelerator.scala 51:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<4>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          node _T_4 = lt(y, UInt<16>("h014")) @[Accelerator.scala 56:15]
          when _T_4 : @[Accelerator.scala 56:28]
            stateReg <= UInt<4>("h03") @[Accelerator.scala 58:17]
            skip @[Accelerator.scala 56:28]
          else : @[Accelerator.scala 59:19]
            node _T_5 = add(x, UInt<16>("h01")) @[Accelerator.scala 61:16]
            node _T_6 = tail(_T_5, 1) @[Accelerator.scala 61:16]
            x <= _T_6 @[Accelerator.scala 61:11]
            stateReg <= UInt<4>("h01") @[Accelerator.scala 62:18]
            skip @[Accelerator.scala 59:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_7 = eq(UInt<4>("h04"), stateReg) @[Conditional.scala 37:30]
          when _T_7 : @[Conditional.scala 39:67]
            node _T_8 = add(x, UInt<16>("h01")) @[Accelerator.scala 66:13]
            node _T_9 = tail(_T_8, 1) @[Accelerator.scala 66:13]
            x <= _T_9 @[Accelerator.scala 66:8]
            stateReg <= UInt<4>("h01") @[Accelerator.scala 67:16]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_10 = eq(UInt<4>("h03"), stateReg) @[Conditional.scala 37:30]
            when _T_10 : @[Conditional.scala 39:67]
              node _T_11 = mul(UInt<16>("h014"), y) @[Accelerator.scala 70:36]
              node _T_12 = add(x, _T_11) @[Accelerator.scala 70:23]
              node _T_13 = tail(_T_12, 1) @[Accelerator.scala 70:23]
              addressReg <= _T_13 @[Accelerator.scala 70:18]
              node _T_14 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 71:25]
              node _T_15 = eq(x, UInt<16>("h00")) @[Accelerator.scala 71:42]
              node _T_16 = or(_T_14, _T_15) @[Accelerator.scala 71:38]
              node _T_17 = eq(x, UInt<16>("h013")) @[Accelerator.scala 71:61]
              node _T_18 = or(_T_16, _T_17) @[Accelerator.scala 71:56]
              node _T_19 = eq(y, UInt<16>("h00")) @[Accelerator.scala 71:80]
              node _T_20 = or(_T_18, _T_19) @[Accelerator.scala 71:76]
              node _T_21 = eq(y, UInt<16>("h013")) @[Accelerator.scala 71:99]
              node _T_22 = or(_T_20, _T_21) @[Accelerator.scala 71:94]
              when _T_22 : @[Accelerator.scala 71:114]
                stateReg <= UInt<4>("h0a") @[Accelerator.scala 72:16]
                skip @[Accelerator.scala 71:114]
              else : @[Accelerator.scala 73:19]
                stateReg <= UInt<4>("h05") @[Accelerator.scala 74:18]
                skip @[Accelerator.scala 73:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_23 = eq(UInt<4>("h05"), stateReg) @[Conditional.scala 37:30]
              when _T_23 : @[Conditional.scala 39:67]
                node _T_24 = add(y, UInt<16>("h01")) @[Accelerator.scala 78:41]
                node _T_25 = tail(_T_24, 1) @[Accelerator.scala 78:41]
                node _T_26 = mul(UInt<16>("h014"), _T_25) @[Accelerator.scala 78:36]
                node _T_27 = add(x, _T_26) @[Accelerator.scala 78:23]
                node _T_28 = tail(_T_27, 1) @[Accelerator.scala 78:23]
                addressReg <= _T_28 @[Accelerator.scala 78:18]
                node _T_29 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 79:24]
                when _T_29 : @[Accelerator.scala 79:39]
                  stateReg <= UInt<4>("h0a") @[Accelerator.scala 80:17]
                  skip @[Accelerator.scala 79:39]
                else : @[Accelerator.scala 81:19]
                  stateReg <= UInt<4>("h06") @[Accelerator.scala 82:18]
                  skip @[Accelerator.scala 81:19]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_30 = eq(UInt<4>("h06"), stateReg) @[Conditional.scala 37:30]
                when _T_30 : @[Conditional.scala 39:67]
                  node _T_31 = add(x, UInt<16>("h01")) @[Accelerator.scala 86:23]
                  node _T_32 = tail(_T_31, 1) @[Accelerator.scala 86:23]
                  node _T_33 = mul(UInt<16>("h014"), y) @[Accelerator.scala 86:48]
                  node _T_34 = add(_T_32, _T_33) @[Accelerator.scala 86:35]
                  node _T_35 = tail(_T_34, 1) @[Accelerator.scala 86:35]
                  addressReg <= _T_35 @[Accelerator.scala 86:18]
                  node _T_36 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 87:24]
                  when _T_36 : @[Accelerator.scala 87:39]
                    stateReg <= UInt<4>("h0a") @[Accelerator.scala 88:18]
                    skip @[Accelerator.scala 87:39]
                  else : @[Accelerator.scala 89:20]
                    stateReg <= UInt<4>("h07") @[Accelerator.scala 90:18]
                    skip @[Accelerator.scala 89:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_37 = eq(UInt<4>("h07"), stateReg) @[Conditional.scala 37:30]
                  when _T_37 : @[Conditional.scala 39:67]
                    node _T_38 = sub(x, UInt<16>("h01")) @[Accelerator.scala 94:24]
                    node _T_39 = tail(_T_38, 1) @[Accelerator.scala 94:24]
                    node _T_40 = mul(UInt<16>("h014"), y) @[Accelerator.scala 94:50]
                    node _T_41 = add(_T_39, _T_40) @[Accelerator.scala 94:37]
                    node _T_42 = tail(_T_41, 1) @[Accelerator.scala 94:37]
                    addressReg <= _T_42 @[Accelerator.scala 94:18]
                    node _T_43 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 95:24]
                    when _T_43 : @[Accelerator.scala 95:39]
                      stateReg <= UInt<4>("h0a") @[Accelerator.scala 96:18]
                      skip @[Accelerator.scala 95:39]
                    else : @[Accelerator.scala 97:19]
                      stateReg <= UInt<4>("h08") @[Accelerator.scala 98:18]
                      skip @[Accelerator.scala 97:19]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_44 = eq(UInt<4>("h08"), stateReg) @[Conditional.scala 37:30]
                    when _T_44 : @[Conditional.scala 39:67]
                      node _T_45 = sub(y, UInt<16>("h01")) @[Accelerator.scala 102:41]
                      node _T_46 = tail(_T_45, 1) @[Accelerator.scala 102:41]
                      node _T_47 = mul(UInt<16>("h014"), _T_46) @[Accelerator.scala 102:36]
                      node _T_48 = add(x, _T_47) @[Accelerator.scala 102:23]
                      node _T_49 = tail(_T_48, 1) @[Accelerator.scala 102:23]
                      addressReg <= _T_49 @[Accelerator.scala 102:18]
                      node _T_50 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 103:24]
                      when _T_50 : @[Accelerator.scala 103:39]
                        stateReg <= UInt<4>("h0a") @[Accelerator.scala 104:18]
                        skip @[Accelerator.scala 103:39]
                      else : @[Accelerator.scala 105:19]
                        stateReg <= UInt<4>("h09") @[Accelerator.scala 106:18]
                        skip @[Accelerator.scala 105:19]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_51 = eq(UInt<4>("h0a"), stateReg) @[Conditional.scala 37:30]
                      when _T_51 : @[Conditional.scala 39:67]
                        io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 110:22]
                        node _T_52 = mul(UInt<16>("h014"), y) @[Accelerator.scala 111:33]
                        node _T_53 = add(x, _T_52) @[Accelerator.scala 111:22]
                        node _T_54 = tail(_T_53, 1) @[Accelerator.scala 111:22]
                        node _T_55 = add(_T_54, UInt<16>("h0190")) @[Accelerator.scala 111:36]
                        node _T_56 = tail(_T_55, 1) @[Accelerator.scala 111:36]
                        io.address <= _T_56 @[Accelerator.scala 111:17]
                        io.dataWrite <= UInt<32>("h00") @[Accelerator.scala 112:20]
                        node _T_57 = add(y, UInt<16>("h01")) @[Accelerator.scala 113:14]
                        node _T_58 = tail(_T_57, 1) @[Accelerator.scala 113:14]
                        y <= _T_58 @[Accelerator.scala 113:9]
                        stateReg <= UInt<4>("h02") @[Accelerator.scala 114:15]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_59 = eq(UInt<4>("h09"), stateReg) @[Conditional.scala 37:30]
                        when _T_59 : @[Conditional.scala 39:67]
                          io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 117:22]
                          node _T_60 = mul(UInt<16>("h014"), y) @[Accelerator.scala 118:37]
                          node _T_61 = add(x, _T_60) @[Accelerator.scala 118:24]
                          node _T_62 = tail(_T_61, 1) @[Accelerator.scala 118:24]
                          node _T_63 = add(_T_62, UInt<16>("h0190")) @[Accelerator.scala 118:41]
                          node _T_64 = tail(_T_63, 1) @[Accelerator.scala 118:41]
                          io.address <= _T_64 @[Accelerator.scala 118:18]
                          io.dataWrite <= UInt<32>("h0ff") @[Accelerator.scala 119:20]
                          node _T_65 = add(y, UInt<16>("h01")) @[Accelerator.scala 120:14]
                          node _T_66 = tail(_T_65, 1) @[Accelerator.scala 120:14]
                          y <= _T_66 @[Accelerator.scala 120:9]
                          stateReg <= UInt<4>("h02") @[Accelerator.scala 121:16]
                          skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip start : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    

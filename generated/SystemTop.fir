;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, address : UInt<16>, flip dataRead : UInt<32>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    reg stateReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Accelerator.scala 21:25]
    reg addressReg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 24:27]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 25:24]
    io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 28:18]
    io.address <= UInt<16>("h00") @[Accelerator.scala 29:14]
    io.address <= addressReg @[Accelerator.scala 30:14]
    io.dataWrite <= dataReg @[Accelerator.scala 31:16]
    io.done <= UInt<1>("h00") @[Accelerator.scala 32:11]
    reg x : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 34:18]
    reg y : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 35:18]
    node _T = eq(UInt<4>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 41:21]
        x <= UInt<1>("h00") @[Accelerator.scala 42:11]
        y <= UInt<1>("h00") @[Accelerator.scala 43:11]
        stateReg <= UInt<4>("h01") @[Accelerator.scala 44:18]
        skip @[Accelerator.scala 41:21]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        y <= UInt<1>("h00") @[Accelerator.scala 48:8]
        node _T_2 = lt(x, UInt<16>("h014")) @[Accelerator.scala 49:13]
        when _T_2 : @[Accelerator.scala 49:25]
          stateReg <= UInt<4>("h02") @[Accelerator.scala 50:18]
          skip @[Accelerator.scala 49:25]
        else : @[Accelerator.scala 51:19]
          io.done <= UInt<1>("h01") @[Accelerator.scala 52:17]
          skip @[Accelerator.scala 51:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<4>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          node _T_4 = lt(y, UInt<16>("h014")) @[Accelerator.scala 56:15]
          when _T_4 : @[Accelerator.scala 56:28]
            stateReg <= UInt<4>("h03") @[Accelerator.scala 57:17]
            skip @[Accelerator.scala 56:28]
          else : @[Accelerator.scala 58:19]
            node _T_5 = add(x, UInt<16>("h01")) @[Accelerator.scala 59:16]
            node _T_6 = tail(_T_5, 1) @[Accelerator.scala 59:16]
            x <= _T_6 @[Accelerator.scala 59:11]
            stateReg <= UInt<4>("h01") @[Accelerator.scala 60:18]
            skip @[Accelerator.scala 58:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_7 = eq(UInt<4>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_7 : @[Conditional.scala 39:67]
            node _T_8 = mul(UInt<16>("h014"), y) @[Accelerator.scala 65:36]
            node _T_9 = add(x, _T_8) @[Accelerator.scala 65:23]
            node _T_10 = tail(_T_9, 1) @[Accelerator.scala 65:23]
            addressReg <= _T_10 @[Accelerator.scala 65:18]
            node _T_11 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 66:25]
            node _T_12 = eq(x, UInt<16>("h00")) @[Accelerator.scala 66:42]
            node _T_13 = or(_T_11, _T_12) @[Accelerator.scala 66:38]
            node _T_14 = eq(x, UInt<16>("h013")) @[Accelerator.scala 66:61]
            node _T_15 = or(_T_13, _T_14) @[Accelerator.scala 66:56]
            node _T_16 = eq(y, UInt<16>("h00")) @[Accelerator.scala 66:80]
            node _T_17 = or(_T_15, _T_16) @[Accelerator.scala 66:76]
            node _T_18 = eq(y, UInt<16>("h013")) @[Accelerator.scala 66:99]
            node _T_19 = or(_T_17, _T_18) @[Accelerator.scala 66:94]
            when _T_19 : @[Accelerator.scala 66:114]
              stateReg <= UInt<4>("h09") @[Accelerator.scala 67:16]
              skip @[Accelerator.scala 66:114]
            else : @[Accelerator.scala 68:19]
              stateReg <= UInt<4>("h04") @[Accelerator.scala 69:18]
              skip @[Accelerator.scala 68:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_20 = eq(UInt<4>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_20 : @[Conditional.scala 39:67]
              node _T_21 = add(y, UInt<16>("h01")) @[Accelerator.scala 73:41]
              node _T_22 = tail(_T_21, 1) @[Accelerator.scala 73:41]
              node _T_23 = mul(UInt<16>("h014"), _T_22) @[Accelerator.scala 73:36]
              node _T_24 = add(x, _T_23) @[Accelerator.scala 73:23]
              node _T_25 = tail(_T_24, 1) @[Accelerator.scala 73:23]
              addressReg <= _T_25 @[Accelerator.scala 73:18]
              node _T_26 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 74:24]
              when _T_26 : @[Accelerator.scala 74:39]
                stateReg <= UInt<4>("h09") @[Accelerator.scala 75:17]
                skip @[Accelerator.scala 74:39]
              else : @[Accelerator.scala 76:19]
                stateReg <= UInt<4>("h05") @[Accelerator.scala 77:18]
                skip @[Accelerator.scala 76:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_27 = eq(UInt<4>("h05"), stateReg) @[Conditional.scala 37:30]
              when _T_27 : @[Conditional.scala 39:67]
                node _T_28 = add(x, UInt<16>("h01")) @[Accelerator.scala 81:23]
                node _T_29 = tail(_T_28, 1) @[Accelerator.scala 81:23]
                node _T_30 = mul(UInt<16>("h014"), y) @[Accelerator.scala 81:48]
                node _T_31 = add(_T_29, _T_30) @[Accelerator.scala 81:35]
                node _T_32 = tail(_T_31, 1) @[Accelerator.scala 81:35]
                addressReg <= _T_32 @[Accelerator.scala 81:18]
                node _T_33 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 82:24]
                when _T_33 : @[Accelerator.scala 82:39]
                  stateReg <= UInt<4>("h09") @[Accelerator.scala 83:18]
                  skip @[Accelerator.scala 82:39]
                else : @[Accelerator.scala 84:20]
                  stateReg <= UInt<4>("h06") @[Accelerator.scala 85:18]
                  skip @[Accelerator.scala 84:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_34 = eq(UInt<4>("h06"), stateReg) @[Conditional.scala 37:30]
                when _T_34 : @[Conditional.scala 39:67]
                  node _T_35 = sub(x, UInt<16>("h01")) @[Accelerator.scala 89:24]
                  node _T_36 = tail(_T_35, 1) @[Accelerator.scala 89:24]
                  node _T_37 = mul(UInt<16>("h014"), y) @[Accelerator.scala 89:50]
                  node _T_38 = add(_T_36, _T_37) @[Accelerator.scala 89:37]
                  node _T_39 = tail(_T_38, 1) @[Accelerator.scala 89:37]
                  addressReg <= _T_39 @[Accelerator.scala 89:18]
                  node _T_40 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 90:24]
                  when _T_40 : @[Accelerator.scala 90:39]
                    stateReg <= UInt<4>("h09") @[Accelerator.scala 91:18]
                    skip @[Accelerator.scala 90:39]
                  else : @[Accelerator.scala 92:19]
                    stateReg <= UInt<4>("h07") @[Accelerator.scala 93:18]
                    skip @[Accelerator.scala 92:19]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_41 = eq(UInt<4>("h07"), stateReg) @[Conditional.scala 37:30]
                  when _T_41 : @[Conditional.scala 39:67]
                    node _T_42 = sub(y, UInt<16>("h01")) @[Accelerator.scala 97:41]
                    node _T_43 = tail(_T_42, 1) @[Accelerator.scala 97:41]
                    node _T_44 = mul(UInt<16>("h014"), _T_43) @[Accelerator.scala 97:36]
                    node _T_45 = add(x, _T_44) @[Accelerator.scala 97:23]
                    node _T_46 = tail(_T_45, 1) @[Accelerator.scala 97:23]
                    addressReg <= _T_46 @[Accelerator.scala 97:18]
                    node _T_47 = eq(io.dataRead, UInt<16>("h00")) @[Accelerator.scala 98:24]
                    when _T_47 : @[Accelerator.scala 98:39]
                      stateReg <= UInt<4>("h09") @[Accelerator.scala 99:18]
                      skip @[Accelerator.scala 98:39]
                    else : @[Accelerator.scala 100:19]
                      stateReg <= UInt<4>("h08") @[Accelerator.scala 101:18]
                      skip @[Accelerator.scala 100:19]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_48 = eq(UInt<4>("h09"), stateReg) @[Conditional.scala 37:30]
                    when _T_48 : @[Conditional.scala 39:67]
                      io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 105:22]
                      node _T_49 = mul(UInt<16>("h014"), y) @[Accelerator.scala 106:33]
                      node _T_50 = add(x, _T_49) @[Accelerator.scala 106:22]
                      node _T_51 = tail(_T_50, 1) @[Accelerator.scala 106:22]
                      node _T_52 = add(_T_51, UInt<16>("h0190")) @[Accelerator.scala 106:36]
                      node _T_53 = tail(_T_52, 1) @[Accelerator.scala 106:36]
                      io.address <= _T_53 @[Accelerator.scala 106:17]
                      dataReg <= UInt<32>("h00") @[Accelerator.scala 107:15]
                      node _T_54 = add(y, UInt<16>("h01")) @[Accelerator.scala 108:14]
                      node _T_55 = tail(_T_54, 1) @[Accelerator.scala 108:14]
                      y <= _T_55 @[Accelerator.scala 108:9]
                      stateReg <= UInt<4>("h02") @[Accelerator.scala 109:15]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_56 = eq(UInt<4>("h08"), stateReg) @[Conditional.scala 37:30]
                      when _T_56 : @[Conditional.scala 39:67]
                        io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 112:22]
                        node _T_57 = mul(UInt<16>("h014"), y) @[Accelerator.scala 113:37]
                        node _T_58 = add(x, _T_57) @[Accelerator.scala 113:24]
                        node _T_59 = tail(_T_58, 1) @[Accelerator.scala 113:24]
                        node _T_60 = add(_T_59, UInt<16>("h0190")) @[Accelerator.scala 113:41]
                        node _T_61 = tail(_T_60, 1) @[Accelerator.scala 113:41]
                        io.address <= _T_61 @[Accelerator.scala 113:18]
                        dataReg <= UInt<32>("h0ff") @[Accelerator.scala 114:15]
                        node _T_62 = add(y, UInt<16>("h01")) @[Accelerator.scala 115:14]
                        node _T_63 = tail(_T_62, 1) @[Accelerator.scala 115:14]
                        y <= _T_63 @[Accelerator.scala 115:9]
                        stateReg <= UInt<4>("h02") @[Accelerator.scala 116:16]
                        skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip start : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    
